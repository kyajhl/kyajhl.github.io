<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>mybatis动态sql</title>
    <url>/posts/mybatis%E5%8A%A8%E6%80%81sql/</url>
    <content><![CDATA[<h1 id="if-标签"><a href="#if-标签" class="headerlink" title="if 标签"></a>if 标签</h1><p>可以判断是否符合条件，再进行赋值查询</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;baseMap&quot;</span>&gt;</span></span><br><span class="line">	select * </span><br><span class="line">    from tb_user</span><br><span class="line">    where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName != null&quot;</span>&gt;</span></span><br><span class="line">        and user_name=#&#123;userName&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;realName != null&quot;</span>&gt;</span></span><br><span class="line">        and real_name=#&#123;realName&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age &gt; 0&quot;</span>&gt;</span></span><br><span class="line">        and age=#&#123;age&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id != null&quot;</span>&gt;</span></span><br><span class="line">        and id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="where-标签"><a href="#where-标签" class="headerlink" title="where 标签"></a>where 标签</h1><p>在写**<code>where</code><strong>的时候，为了保证 <strong><code>SQL</code></strong> 的的语法正确，在有</strong><code>and</code><strong>的情况下，可以用</strong><code>1=1</code><strong>表达式，若不想这么写的话，可以用</strong><code>where</code>**标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;baseMap&quot;</span>&gt;</span></span><br><span class="line">	select * </span><br><span class="line">	from tb_user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName != null&quot;</span>&gt;</span></span><br><span class="line">            and user_name=#&#123;userName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;realName != null&quot;</span>&gt;</span></span><br><span class="line">            and real_name=#&#123;realName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age &gt; 0&quot;</span>&gt;</span></span><br><span class="line">            and age=#&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id != null&quot;</span>&gt;</span></span><br><span class="line">            and id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="choose-标签"><a href="#choose-标签" class="headerlink" title="choose 标签"></a>choose 标签</h1><p>**<code>choose</code><strong>相当于Java中的</strong><code>switch</code><strong>语句，若第一个不成立，则执行第二个，若第二个也不成立，则执行最后的</strong><code>otherwise</code>**标签里面的内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;baseMap&quot;</span>&gt;</span></span><br><span class="line">	select * </span><br><span class="line">	from tb_user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;userName != null&quot;</span>&gt;</span></span><br><span class="line">            	and user_name = #&#123;userName&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;realName != null&quot;</span>&gt;</span></span><br><span class="line">            	and real_name = #&#123;realName&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            	order by id desc</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="set-标签"><a href="#set-标签" class="headerlink" title="set 标签"></a>set 标签</h1><p>可以去掉多余的 <strong><code>,</code></strong>  ，避免了**<code>SQL</code>**报错</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	update </span><br><span class="line">    	tb_user</span><br><span class="line">	<span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName != null&quot;</span>&gt;</span></span><br><span class="line">        	user_name = #&#123;userName&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;realName != null&quot;</span>&gt;</span></span><br><span class="line">            real_name = #&#123;realName&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age &gt; 0&quot;</span>&gt;</span></span><br><span class="line">            age = #&#123;age&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where</span><br><span class="line">    	id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="trim-标签"><a href="#trim-标签" class="headerlink" title="trim 标签"></a>trim 标签</h1><p><strong><code>trim</code><strong>标签可以完成 <strong><code>where</code></strong> 或者 <strong><code>set</code></strong> 标签的功能，</strong><code>prefix</code><strong>表示前缀为</strong>where</strong>标签，**<code>prefixOverrides</code><strong>表示去掉前面多余的</strong>and**</p>
<ul>
<li>第一种</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;baseMap&quot;</span>&gt;</span></span><br><span class="line">	select *</span><br><span class="line">	from tb_user</span><br><span class="line">	<span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;AND | OR&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName != null&quot;</span>&gt;</span></span><br><span class="line">        	and user_name = #&#123;userName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;realName != null&quot;</span>&gt;</span></span><br><span class="line">            and real_name = #&#123;realName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age &gt; 0&quot;</span>&gt;</span></span><br><span class="line">            and age = #&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>**<code>suffixOverrides</code>**表示去掉后面多余的 <strong><code>,</code></strong></p>
<ul>
<li>第二种</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	update</span><br><span class="line">    	tb_user</span><br><span class="line">	<span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;set&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName != null&quot;</span>&gt;</span></span><br><span class="line">        	user_name = #&#123;userName&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;realName != null&quot;</span>&gt;</span></span><br><span class="line">            real_name = #&#123;realName&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age &gt; 0&quot;</span>&gt;</span></span><br><span class="line">            age = #&#123;age&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    where</span><br><span class="line">    	id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="forEach-标签"><a href="#forEach-标签" class="headerlink" title="forEach 标签"></a>forEach 标签</h1><p><strong><code>forEach</code></strong> 标签可以对集合进行遍历，**<code>open</code><strong>表示开始的括号，</strong><code>close</code><strong>表示最后的括号，</strong><code>separator</code><strong>表示用 <strong><code>,</code></strong> 分割，</strong><code>item</code>**表示每一个元素</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;baseMap&quot;</span>&gt;</span></span><br><span class="line">	select *</span><br><span class="line">	from tb_user</span><br><span class="line">	<span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ids != null&quot;</span>&gt;</span></span><br><span class="line">        	id in</span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">                #&#123;id&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="bind-标签"><a href="#bind-标签" class="headerlink" title="bind 标签"></a>bind 标签</h1><p>**<code>bind</code><strong>标签允许在</strong><code>OGNL</code>**表达式以外创建一个变量，将该变量绑定到上下文中，可以供后续使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;baseMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;bind name=&quot;userNameLike&quot; value=&quot;&#x27;%&#x27;+_parameter.getUserName()+&#x27;%&#x27;&quot;/&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">&quot;userNameLike&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;%&#x27; + userName + &#x27;%&#x27;&quot;</span>/&gt;</span></span><br><span class="line">	select *</span><br><span class="line">	from tb_user</span><br><span class="line">	<span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName != null&quot;</span>&gt;</span></span><br><span class="line">        	user_name like #&#123;userNameLike&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown语法</title>
    <url>/posts/Markdown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Markdown-基础语法"><a href="#Markdown-基础语法" class="headerlink" title="Markdown 基础语法"></a>Markdown 基础语法</h1><h2 id="1-Markdown-标题"><a href="#1-Markdown-标题" class="headerlink" title="(1) Markdown 标题"></a>(1) Markdown 标题</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一级标题</span></span><br><span class="line"><span class="comment">## 二级标题</span></span><br><span class="line"><span class="comment">### 三级标题</span></span><br><span class="line"><span class="comment">#### 四级标题</span></span><br><span class="line"><span class="comment">##### 五级标题</span></span><br><span class="line"><span class="comment">###### 六级标题</span></span><br></pre></td></tr></table></figure>



<h2 id="2-Markdown-文本"><a href="#2-Markdown-文本" class="headerlink" title="(2) Markdown 文本"></a>(2) Markdown 文本</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">*斜体文本*</span></span><br><span class="line"><span class="string">**粗体文本**</span></span><br><span class="line"><span class="string">***斜粗体文本***</span></span><br><span class="line"><span class="string">_斜体文本_</span></span><br><span class="line"><span class="string">__粗体文本__</span></span><br><span class="line"><span class="string">___斜粗体文本___</span></span><br></pre></td></tr></table></figure>

<h3 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h3><p><em>斜体文本</em></p>
<p><strong>粗体文本</strong></p>
<p><em><strong>斜粗体文本</strong></em></p>
<p><em>斜体文本</em></p>
<p><strong>粗体文本</strong></p>
<p><em><strong>斜粗体文本</strong></em></p>
<h2 id="3-Markdown-列表"><a href="#3-Markdown-列表" class="headerlink" title="(3) Markdown 列表"></a>(3) Markdown 列表</h2><ul>
<li>无序列表，使用 <strong>星号</strong>(<em>****)、<strong>加号</strong>(</em><em>+<strong>)、</strong>减号*</em>(<strong>-</strong>) 加一个 <strong>空格</strong> 作为列表标记</li>
<li>有序列表，使用 <strong>数字</strong>再加上 (<strong>.</strong>) <strong>号</strong>，再加上一个 <strong>空格</strong> 作为列表标记</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">*</span> <span class="string">无序列表</span> <span class="number">1</span></span><br><span class="line"><span class="string">+</span> <span class="string">无序列表</span> <span class="number">2</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">无需列表</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span><span class="string">.</span> <span class="string">有序列表</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span><span class="string">.</span> <span class="string">有序列表</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span><span class="string">.</span> <span class="string">有序列表</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="例如-1"><a href="#例如-1" class="headerlink" title="例如"></a>例如</h3><ul>
<li><p>无序列表 1</p>
</li>
<li><p>无序列表 2</p>
<ul>
<li>无序列表 3</li>
</ul>
</li>
</ul>
<ol>
<li>有序列表 1</li>
<li>有序列表 2</li>
<li>有序列表 3</li>
</ol>
<h2 id="4-Markdown-链接"><a href="#4-Markdown-链接" class="headerlink" title="(4) Markdown 链接"></a>(4) Markdown 链接</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">[<span class="string">链接名称</span>]<span class="string">(链接地址)</span></span><br><span class="line">[<span class="string">百度</span>]<span class="string">(https://www.baidu.com)</span></span><br><span class="line"></span><br><span class="line"><span class="string">或者</span></span><br><span class="line"></span><br><span class="line"><span class="string">&lt;链接地址&gt;</span></span><br><span class="line"><span class="string">&lt;https://www.baidu.com&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="例如-2"><a href="#例如-2" class="headerlink" title="例如"></a>例如</h3><p><a href="https://www.baidu.com/">百度</a></p>
<p><a href="https://www.baidu.com/">https://www.baidu.com</a></p>
<h2 id="5-Markdown-引用"><a href="#5-Markdown-引用" class="headerlink" title="(5) Markdown 引用"></a>(5) Markdown 引用</h2><p>引用的格式是在符号 <strong>&gt;</strong> 后面书写文字，或者加一个空格在书写文字</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&gt;这是一个引用</span></span><br><span class="line"><span class="string">&gt;</span> <span class="string">这是一个引用</span></span><br></pre></td></tr></table></figure>

<h3 id="例如-3"><a href="#例如-3" class="headerlink" title="例如"></a>例如</h3><blockquote>
<p>这是一个引用</p>
</blockquote>
<blockquote>
<p>这是一个引用</p>
</blockquote>
<h2 id="6-Markdown-分割线"><a href="#6-Markdown-分割线" class="headerlink" title="(6) Markdown 分割线"></a>(6) Markdown 分割线</h2><p>可以在一行中用 <strong>三个 -</strong> 或者 ***** 来建立一个分割线，同时需要在分割线的上面空一行</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">这是一个分割线</span></span><br><span class="line"></span><br><span class="line"><span class="string">或者</span></span><br><span class="line"></span><br><span class="line"><span class="string">***</span></span><br><span class="line"><span class="string">*****</span></span><br></pre></td></tr></table></figure>

<h3 id="例如-4"><a href="#例如-4" class="headerlink" title="例如"></a>例如</h3><hr>
<hr>
<hr>
<hr>
<hr>
<hr>
<hr>
<hr>
<h2 id="7-Markdown-删除线"><a href="#7-Markdown-删除线" class="headerlink" title="(7) Markdown 删除线"></a>(7) Markdown 删除线</h2><p>删除线的使用，需要在删除的文字 <strong>前后</strong> 各使用 <strong>两个</strong> <strong>~</strong> </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">~~这是要删除的内容~~</span></span><br></pre></td></tr></table></figure>

<h3 id="例如-5"><a href="#例如-5" class="headerlink" title="例如"></a>例如</h3><p><del>这段内容要被删除了</del></p>
<h2 id="8-Markdown-下划线"><a href="#8-Markdown-下划线" class="headerlink" title="(8) Markdown 下划线"></a>(8) Markdown 下划线</h2><p>下划线的使用，在需要添加下划线的文字首部和尾部加上 <code>&lt;u&gt;文本&lt;/u&gt; </code>，如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;u&gt;这行文字已被添加下划线&lt;/u&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="例如-6"><a href="#例如-6" class="headerlink" title="例如"></a>例如</h3><p><u>这行文字已被添加下划线</u></p>
<h2 id="9-Markdown-表格"><a href="#9-Markdown-表格" class="headerlink" title="(9) Markdown 表格"></a>(9) Markdown 表格</h2><p>表格使用 <code>|</code> 来分隔不同的单元格，使用 <code>-</code> 来分隔表头和其他行，如果想调整表格的左对齐、右对齐、居中对齐：</p>
<ul>
<li><code>:-</code>   将表头及单元格的内容 <strong>左对齐</strong></li>
<li><code>:-:</code> 将表头及单元格的内容 <strong>居中对齐</strong></li>
<li><code>-:</code>   将表头及单元格的内容 <strong>右对齐</strong></li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">|第一列|第二列|第三列|</span></span><br><span class="line"><span class="string">|:-|:-:|-:|</span></span><br><span class="line"><span class="string">|你好|hello</span> <span class="string">world|学</span> <span class="string">Java</span> <span class="string">，狠狠赚一笔|</span></span><br></pre></td></tr></table></figure>

<h3 id="例如-7"><a href="#例如-7" class="headerlink" title="例如"></a>例如</h3><table>
<thead>
<tr>
<th align="left">第一列</th>
<th align="center">第二列</th>
<th align="right">第三列</th>
</tr>
</thead>
<tbody><tr>
<td align="left">你好</td>
<td align="center">hello world</td>
<td align="right">学 Java ，狠狠赚一笔</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>第一列</th>
<th>第二列</th>
<th>第三列</th>
</tr>
</thead>
<tbody><tr>
<td>你好</td>
<td>hello world</td>
<td>学 Java ，狠狠赚一笔</td>
</tr>
</tbody></table>
<h2 id="10-Markdown-图片"><a href="#10-Markdown-图片" class="headerlink" title="(10) Markdown 图片"></a>(10) Markdown 图片</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="type">![</span><span class="string">图片名称](图片地址)</span></span><br><span class="line"><span class="type">![Vue</span><span class="string">原型链](C:\Users\13627\Desktop\Vue原型链.png)</span></span><br><span class="line"></span><br><span class="line"><span class="type">![</span><span class="string">百度图标](https://www.baidu.com/favicon.ico)</span></span><br></pre></td></tr></table></figure>

<h3 id="例如-8"><a href="#例如-8" class="headerlink" title="例如"></a>例如</h3><p><img src="/posts/Markdown%E8%AF%AD%E6%B3%95/Vue%E5%8E%9F%E5%9E%8B%E9%93%BE.png" alt="Vue原型链"></p>
<p><img src="https://www.baidu.com/favicon.ico" alt="百度图标"></p>
<h2 id="11-Markdown-脚注"><a href="#11-Markdown-脚注" class="headerlink" title="(11) Markdown 脚注"></a>(11) Markdown 脚注</h2><p>脚注是对文本的备注说明，脚注与链接的区别，如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">链接：[文字](链接)</span></span><br><span class="line"></span><br><span class="line"><span class="string">脚注：文字[^脚注名字]</span></span><br><span class="line">[<span class="string">^脚注名字</span>]<span class="string">:</span> <span class="string">这是一个脚注</span></span><br></pre></td></tr></table></figure>

<h3 id="例如-9"><a href="#例如-9" class="headerlink" title="例如"></a>例如</h3><p>链接：<a href="https://www.baidu.com/">百度</a></p>
<p>脚注：百度<a href="666">^起源</a>     创业<a href="%E5%88%9B%E4%B8%9A%EF%BC%9A%E5%8D%B3%E8%B5%9A%E9%92%B1">^1</a></p>
<h2 id="12-Markdown-代码块"><a href="#12-Markdown-代码块" class="headerlink" title="(12) Markdown 代码块"></a>(12) Markdown 代码块</h2><p>如果要引用代码块，用  <code> ``</code> 符号包裹起来即可，或者直接输入 <code>```</code> 后面加语言的名字，也可以不加</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;hello world&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="Markdown-高级语法"><a href="#Markdown-高级语法" class="headerlink" title="Markdown 高级语法"></a>Markdown 高级语法</h1><h2 id="1-Markdown-数学公式"><a href="#1-Markdown-数学公式" class="headerlink" title="(1) Markdown 数学公式"></a>(1) Markdown 数学公式</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$$</span></span><br><span class="line">	<span class="string">这里写公式语法</span></span><br><span class="line"><span class="string">$$</span></span><br></pre></td></tr></table></figure>


<p>$$<br>H(D_2) &#x3D; -\left(\frac{2}{4}\log_2 \frac{2}{4} + \frac{2}{4}\log_2 \frac{2}{4}\right) &#x3D; 1<br>$$</p>
<p>$$<br>\ce{Hg^2+ -&gt;[I-] HgI2 -&gt;[I-] [Hg^{II}I4]^2-}<br>$$</p>
<p>$$<br>\begin{pmatrix}<br>  1 &amp; a_1 &amp; a_1^2 &amp; \cdots &amp; a_1^n \<br>  1 &amp; a_2 &amp; a_2^2 &amp; \cdots &amp; a_2^n \<br>  \vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \<br>  1 &amp; a_m &amp; a_m^2 &amp; \cdots &amp; a_m^n \<br>  \end{pmatrix}<br>$$</p>
<h2 id="2-Markdown-TOC-Table-of-Content"><a href="#2-Markdown-TOC-Table-of-Content" class="headerlink" title="(2) Markdown TOC(Table of Content)"></a>(2) Markdown TOC(Table of Content)</h2><p>列出全部标题，通俗点说，就是一个小目录</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">[<span class="string">TOC</span>] <span class="string">或者</span> [<span class="string">toc</span>]</span><br></pre></td></tr></table></figure>



<p>[TOC]</p>
<h2 id="3-Markdown-HTML"><a href="#3-Markdown-HTML" class="headerlink" title="(3) Markdown HTML"></a>(3) Markdown HTML</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;display:block;text-align:right;color:orangered;&quot;</span>&gt;</span>橙色居右<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;display:block;text-align:center;color:orangered;&quot;</span>&gt;</span>橙色居中<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><span style="display:block;text-align:right;color:orangered;">橙色居右</span><br><span style="display:block;text-align:center;color:orangered;">橙色居中</span></p>
<p><font face="黑体">我是黑体字</font><br><font face="微软雅黑">我是微软雅黑</font><br><font face="STCAIYUN">我是华文彩云</font><br><font color="#0099ff" size="7" face="黑体">color&#x3D;#0099ff size&#x3D;72 face&#x3D;”黑体”</font><br><font color="#00ffff" size="72">color&#x3D;#00ffff</font><br><font color="gray" size="72">color&#x3D;gray</font></p>
<h2 id="4-Markdown-转义"><a href="#4-Markdown-转义" class="headerlink" title="(4) Markdown 转义"></a>(4) Markdown 转义</h2><p>在 <code>Markdown</code> 编辑器里面使用了很多特殊符号来表示特定的意义，该特殊符号将不再显示，这个时候就需要转义字符——反斜杠，如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">\*\*转义特殊符号正常显示\*\*</span></span><br><span class="line"></span><br><span class="line"><span class="string">**无转义特殊符号无法正常显示**</span></span><br></pre></td></tr></table></figure>

<p>**转义特殊符号正常显示**</p>
<p><strong>无转义特殊符号无法正常显示</strong></p>
<h2 id="5-Markdown-URL"><a href="#5-Markdown-URL" class="headerlink" title="(5) Markdown URL"></a>(5) Markdown URL</h2><h2 id="6-Markdown-流程图和时序图"><a href="#6-Markdown-流程图和时序图" class="headerlink" title="(6) Markdown 流程图和时序图"></a>(6) Markdown 流程图和时序图</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">玩家一-&gt;&gt;玩家二: 你好</span><br><span class="line">Note right of 玩家二: 正在思考</span><br><span class="line">玩家二--&gt;&gt;玩家一: 666</span><br></pre></td></tr></table></figure>



<h2 id="7-Markdown-复选框"><a href="#7-Markdown-复选框" class="headerlink" title="(7) Markdown 复选框"></a>(7) Markdown 复选框</h2><p>使用 <code>- [ ]</code> 和 <code>- [x]</code> 语法可以创建复选框，实现 <code>todo-list</code> 等功能，如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">默认没选：-</span> [ ] </span><br><span class="line"><span class="string">默认勾选：-</span> [<span class="string">x</span>] </span><br></pre></td></tr></table></figure>

<ul>
<li><p><input disabled type="checkbox"> 
111</p>
</li>
<li><p><input checked disabled type="checkbox"> 
222</p>
</li>
<li><p><input checked disabled type="checkbox"> 
333</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/posts/test/</url>
    <content><![CDATA[<p><strong>这里是测试博客</strong></p>
<p><img src="/posts/test/Vue%E5%8E%9F%E5%9E%8B%E9%93%BE.png" alt="vue"></p>
<blockquote>
<p>这里终于可以上传图片了</p>
</blockquote>
]]></content>
      <categories>
        <category>心之所向</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>redis</title>
    <url>/posts/redis/</url>
    <content><![CDATA[<h1 id="Redis-10大数据类型"><a href="#Redis-10大数据类型" class="headerlink" title="Redis 10大数据类型"></a>Redis 10大数据类型</h1><p>10大数据类型包括：<strong>String</strong>(字符串)，<strong>Bitmap</strong>(位图)，<strong>Bitfield</strong>(位域)，<strong>Hash</strong>(哈希表)，<strong>List</strong>(集合)，<strong>Set</strong>(列表)，<strong>Sorted set</strong>(有序集合 ZSet)，<strong>Geospatial</strong>(地理空间)，<strong>Hyperlog</strong>(基数统计)，<strong>Stream</strong>(流)</p>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><ol>
<li><code>keys *</code>：查看当前库所有的key</li>
<li><code>exists [key...]</code>：判断某个key是否存在，返回的数字为存在的key数量</li>
<li><code>type key</code>：查看key是什么类型</li>
<li><code>del [key...]</code>：删除指定的key数据，返回的数字为删除的key数量（原子性，若key很大，则在高并发情况下会产生阻塞队列）</li>
<li><code>unlink [key...]</code>：非阻塞删除，会在异步中操作（非阻塞，异步操作，不会产生阻塞队列）</li>
<li><code>ttl key</code>：查看还有多少秒过期，-1表示永不过期，-2表示已过期</li>
<li><code>expire key</code>：为给定的key设置过期时间</li>
<li><code>move key dbindex[0-15]</code>：将当前数据库的key移动到给定的数据库db当中，dbindex直接输入数字即可</li>
<li><code>select dbindex</code>：切换数据库[0-15]，默认为0</li>
<li><code>dbsize</code>：查看当前数据库key的数量</li>
<li><code>flushdb</code>：清空当前库（很危险，尽量不要使用）</li>
<li><code>flushall</code>：通杀全部库（更危险，最好不要使用）</li>
</ol>
<p>备注：</p>
<blockquote>
<p>命令不区分大小写，而key区分大小写</p>
<p>永远的帮助命令，help @类型，如help @String，help @List，help @Hash</p>
</blockquote>
<h1 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h1><h2 id="1、set命令"><a href="#1、set命令" class="headerlink" title="1、set命令"></a>1、set命令</h2><ol>
<li><code>set key value [nx|xx]</code>：*<code>nx</code><em>表示 <em>key</em> 不存在时 <em>set</em> ，</em><code>xx</code>*表示 <em>key</em> 存在时 <em>set</em>，若不符合情况，均返回 <em>null</em></li>
<li><code>set key value [get]</code>：*<code>get</code>*表示会返回<strong>老值</strong>，同时设置<strong>新值</strong>，若 <em>key</em> 不存在则返回 <em>null</em></li>
<li><code>set key value [ex seconds|px milliseconds] </code>：*<code>ex seconds</code>* 以秒为单位设置过期时间，*<code>px milliseconds</code>* 以毫秒为单位设置过期时间</li>
<li><code>set key value [exat unix-time-seconds|pxat unix-time-milliseconds]</code>：*<code>exat unix-time-seconds</code>* 设置以秒为单位的<em>unix</em> 时间戳所对应的时间为过期时间，*<code>pxat unix-time-milliseconds</code>* 设置以毫秒为单位的 <em>unix</em> 时间戳所对应的时间为过期时间</li>
<li><code>set key value [keepttl]</code>：*<code>keepttl</code>* 保留设置前指定键的生存时间，这样在修改了 <em>key</em> 值后也不会丢失原来的过期时间</li>
</ol>
<h2 id="2、mset、mget和msetnx命令"><a href="#2、mset、mget和msetnx命令" class="headerlink" title="2、mset、mget和msetnx命令"></a>2、mset、mget和msetnx命令</h2><ol>
<li><code>mset key value [key value ...]</code>：同时设置多个键值</li>
<li><code>mget key [key ...]</code>：同时获取多个键值</li>
<li><code>msetnx key value [key value ...]</code>：只有不存在键，才能设置值，并且是同时设置，即使只有一个不存在，也不能设置值</li>
</ol>
<h2 id="3、getrange和setrange命令"><a href="#3、getrange和setrange命令" class="headerlink" title="3、getrange和setrange命令"></a>3、getrange和setrange命令</h2><ol>
<li><code>getrange key start end</code>：相当于 <em>Java</em> 中的 <code>subString</code> ，可以截取范围内的字符串</li>
<li><code>setrange key offset value</code>：从 <em>offset</em> 开始，用 <em>value</em> 覆盖原来的值，<em>value</em> 有多少位，就覆盖多少位</li>
</ol>
<h2 id="4、incr、incrby、decr和decrby命令"><a href="#4、incr、incrby、decr和decrby命令" class="headerlink" title="4、incr、incrby、decr和decrby命令"></a>4、incr、incrby、decr和decrby命令</h2><ol>
<li><code>incr key</code>：递增数字</li>
<li><code>incrby key increment</code>：增加指定的整数</li>
<li><code>decr key</code>：递减数字</li>
<li><code>decrby key decrement</code>：减少指定的整数</li>
</ol>
<h2 id="5、strlen和append命令"><a href="#5、strlen和append命令" class="headerlink" title="5、strlen和append命令"></a>5、strlen和append命令</h2><ol>
<li><code>strlen key</code>：获取字符串长度</li>
<li><code>append key value</code>：往键值追加指定内容 <em>value</em></li>
</ol>
<h2 id="6、setex和setnx命令-分布式锁"><a href="#6、setex和setnx命令-分布式锁" class="headerlink" title="6、setex和setnx命令(分布式锁)"></a>6、setex和setnx命令(分布式锁)</h2><ol>
<li><code>setex key seconds value</code>：给 <em>key</em> 设置过期时间和值</li>
<li><code>setnx key value</code>：只有当 <em>key</em> 不存在时，才会设置值</li>
</ol>
<h2 id="7、getset命令"><a href="#7、getset命令" class="headerlink" title="7、getset命令"></a>7、getset命令</h2><ol>
<li><code>getset key value</code>：先 <em>get</em> ，再 <em>set</em> ，和 <code>set key value get</code> 一致</li>
</ol>
<h1 id="List类型"><a href="#List类型" class="headerlink" title="List类型"></a>List类型</h1><h2 id="1、lpush、rpush和lrange命令"><a href="#1、lpush、rpush和lrange命令" class="headerlink" title="1、lpush、rpush和lrange命令"></a>1、lpush、rpush和lrange命令</h2><ol>
<li><code>lpush key element [element ...]</code>：给 <em>key</em> 设置一系列值，并且是从左插入，和链表类似</li>
<li><code>rpush key element [element ...]</code>：给 <em>key</em> 设置一系列值，并且是从右插入，和链表类似</li>
<li><code>lrange key start stop</code>：<em>list</em> 类型独有的遍历方式，<em>start</em> 和 <em>stop</em> 取下标，<em>stop</em> 为 -1 时表示遍历<strong>全部</strong></li>
</ol>
<h2 id="2、lpop和rpop命令"><a href="#2、lpop和rpop命令" class="headerlink" title="2、lpop和rpop命令"></a>2、lpop和rpop命令</h2><ol>
<li><code>lpop key [count]</code>：从左开始弹出 <em>key</em> 对应 <em>count</em> 个值，返回的是弹出的值</li>
<li><code>rpop key [count]</code>：从右开始弹出 <em>key</em> 对应 <em>count</em> 个值，返回的是弹出的值</li>
</ol>
<h2 id="3、lindex和llen命令"><a href="#3、lindex和llen命令" class="headerlink" title="3、lindex和llen命令"></a>3、lindex和llen命令</h2><ol>
<li><code>lindex key index</code>：获取 <em>index</em> 对应的值</li>
<li><code>llen key</code>：获取列表中元素的个数</li>
</ol>
<h2 id="4、lrem和ltrim命令"><a href="#4、lrem和ltrim命令" class="headerlink" title="4、lrem和ltrim命令"></a>4、lrem和ltrim命令</h2><ol>
<li><code>lrem key count element</code>：删除 <em>count</em> 个值等于 <em>element</em> 的元素</li>
<li><code>ltrim key start stop</code>：截取指定范围内的值后再赋值给 <em>key</em></li>
</ol>
<h2 id="5、rpoplpush命令"><a href="#5、rpoplpush命令" class="headerlink" title="5、rpoplpush命令"></a>5、rpoplpush命令</h2><ol>
<li><code>rpoplpush source destination</code>：对 <em>surce</em> 执行 <code>rpop</code> 操作后，把 <strong>弹出的元素</strong> 再 <code>lpush</code> 到 <em>destination</em></li>
</ol>
<h2 id="6、lset和linsert命令"><a href="#6、lset和linsert命令" class="headerlink" title="6、lset和linsert命令"></a>6、lset和linsert命令</h2><ol>
<li><code>lset key index element</code>：设置对应 <em>index</em> 位置的元素值为 <em>element</em></li>
<li><code>linsert key before|after pivot element</code>：在对应 <em>pivot</em> 值的位置前|后，插入 <em>element</em> 值</li>
</ol>
<h1 id="Hash类型"><a href="#Hash类型" class="headerlink" title="Hash类型"></a>Hash类型</h1><h2 id="1、hset、hget、hmset、hmget、hgetall和hdel命令"><a href="#1、hset、hget、hmset、hmget、hgetall和hdel命令" class="headerlink" title="1、hset、hget、hmset、hmget、hgetall和hdel命令"></a>1、hset、hget、hmset、hmget、hgetall和hdel命令</h2><ol>
<li><code>hset key field value [field value ...]</code>：设置 <em>key</em> 对应的键值对，可以设置多个</li>
<li><code>hget key field</code>：获取 <em>key</em> 对应的键</li>
<li><code>hmset key field value [field value ...]</code>：和 <code>hset</code> 用法差不多</li>
<li><code>hmget key field [field ...]</code>：可以获取 <em>key</em> 多个键</li>
<li><code>hgetall key</code>：可以获取 <em>key</em> 对应的多个键值对</li>
<li><code>hdel key field [field ...]</code>：删除 <em>key</em> 多个键</li>
</ol>
<h2 id="2、hlen命令"><a href="#2、hlen命令" class="headerlink" title="2、hlen命令"></a>2、hlen命令</h2><ol>
<li><code>hlen key</code>：获取 <em>key</em> 全部键的个数</li>
</ol>
<h2 id="3、hexists-命令"><a href="#3、hexists-命令" class="headerlink" title="3、hexists 命令"></a>3、hexists 命令</h2><ol>
<li><code>hexists key field</code>：判断 <em>key</em> 对应的键是否存在，若存在则返回 1，不存在返回 0</li>
</ol>
<h2 id="4、hkeys和hvals命令"><a href="#4、hkeys和hvals命令" class="headerlink" title="4、hkeys和hvals命令"></a>4、hkeys和hvals命令</h2><ol>
<li><code>hkeys key</code>：获取 <em>key</em> 所有的键</li>
<li><code>hvals key</code>：获取 <em>key</em> 多有的值</li>
</ol>
<h2 id="5、hincrby和hincrbyfloat命令"><a href="#5、hincrby和hincrbyfloat命令" class="headerlink" title="5、hincrby和hincrbyfloat命令"></a>5、hincrby和hincrbyfloat命令</h2><ol>
<li><code>hincrby key field increment</code>：给 <em>key</em> 对应的键值加上 <em>increment</em> ，但是键对应的值只能为数字，否则会报错</li>
<li><code>hincrbyfloat key field increment</code>：给 <em>key</em> 对应的键值加上 <em>increment</em> ，<em>increment</em> 可以为浮点数</li>
</ol>
<h2 id="6、hsetnx命令"><a href="#6、hsetnx命令" class="headerlink" title="6、hsetnx命令"></a>6、hsetnx命令</h2><ol>
<li><code>hsetnx key field value</code>：给 <em>key</em> 设置键值，但是这个键必须不存在，否则会报错</li>
</ol>
<h1 id="Set类型"><a href="#Set类型" class="headerlink" title="Set类型"></a>Set类型</h1>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>吐槽</title>
    <url>/posts/%E5%90%90%E6%A7%BD/</url>
    <content><![CDATA[<p>还在部署博客平台，艹了，简直日了狗</p>
]]></content>
      <categories>
        <category>心之所向</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h1><h2 id="1、什么是模式？"><a href="#1、什么是模式？" class="headerlink" title="1、什么是模式？"></a>1、什么是模式？</h2><p>模式就是在特定环境下人们解决某类重复出现问题的一套成功或有效的解决方案</p>
<h2 id="2、-模式的作用"><a href="#2、-模式的作用" class="headerlink" title="2、 模式的作用"></a>2、 模式的作用</h2><p>高效、快速的解决应用问题</p>
<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="1、设计模式包含什么"><a href="#1、设计模式包含什么" class="headerlink" title="1、设计模式包含什么"></a>1、设计模式包含什么</h2><p>设计模式一般包含模式名称、问题、解决方案、效果等组成要素</p>
<ul>
<li>模式名称：通过一两个词来描述模式的问题、解决方案和效果、以便更好理解模式和方便开发人员交流、绝大多数模式都是根据其功能或模式结构来命名的</li>
<li>问题：描述了应该在何时使用模式，包含了设计中存在的问题以及问题存在的原因</li>
<li>解决方案：描述了一个设计模式的组成成分，以及这些组成成分之间的相互关系，各自的职责和协作方式，通常解决方案通过UML类图和核心代码来进行描述</li>
<li>效果：描述了模式的优缺点以及在使用模式时应该权衡的问题</li>
</ul>
<h2 id="2、设计模式分为几种"><a href="#2、设计模式分为几种" class="headerlink" title="2、设计模式分为几种"></a>2、设计模式分为几种</h2><p>设计模式（23种）可分为<strong>创建型</strong>，<strong>结构型</strong>和<strong>行为型</strong>三种</p>
<ul>
<li>创建型模式（5种）：主要用于描述如何创建对象</li>
<li>结构型模式（7种）：主要用于描述如何实现类或对象的组合</li>
<li>行为型模式（11种）：主要用于描述类或对象怎样交互以及怎样分配职责</li>
</ul>
<blockquote>
<p>此外，根据某个模式主要是用于处理类之间的关系还是对象之间的关系，设计模式还可以分为<strong>类模式</strong>和<strong>对象模式</strong>，我们经常将两种分类模式结合使用，如单例模式是对象创建型模式，模板方法模式是类行为模式</p>
</blockquote>
<h3 style="color: red">"简单工厂模式"并不在23种设计模式之中</h3>

<h2 id="3、设计模式有什么用"><a href="#3、设计模式有什么用" class="headerlink" title="3、设计模式有什么用"></a>3、设计模式有什么用</h2><ol>
<li>设计模式来源众多专家的经验和智慧，它们是从许多优秀的软件系统中总结出的成功的、能够实现可维护性复用的设计方案，使用这些方案将可以让我们避免做一些重复性的工作，也许我们冥思苦想得到的一个“自以为很了不起”的设计方案其实就是某一个设计模式。在时间就是金钱的今天，设计模式无疑会为有助于我们提高开发和设计效率，但它不保证一定会提高</li>
<li>设计模式提供了一套通用的设计词汇和一种通用的形式来方便开发人员之间沟通和交流，使得设计方案更加通俗易懂。交流通常很耗时，任何有助于提高交流效率的东西都可以为我们节省不少时间。无论你使用哪种编程语言，做什么类型的项目，甚至你处于一个国际化的开发团队，当面对同一个设计模式时，你和别人的理解并无二异，因为设计模式是跨语言、跨平台、跨应用、跨国界的</li>
<li>大部分设计模式都兼顾了系统的可重用性和可扩展性，这使得我们可以更好地重用一些已有的设计方案、功能模块甚至一个完整的软件系统，避免我们经常做一些重复的设计、编写一些重复的代码。此外，随着软件规模的日益增大，软件寿命的日益变长，系统的可维护性和可扩展性也越来越重要，许多设计模式将有助于提高系统的灵活性和可扩展性，让我们在不修改或者少修改现有系统的基础上增加、删除或者替换功能模块。如果一点设计模式都不懂，我想要做到这一点恐怕还是很困难的</li>
<li>合理使用设计模式并对设计模式的使用情况进行文档化，将有助于别人更快地理解系统。如果某一天因为升职或跳槽等原因，别人接手了你的项目，只要他也懂设计模式，我想他应该能够很快理解你的设计思路和实现方案，让你升职无后患之忧，跳槽也心安理得，何乐而不为呢？</li>
<li>最后一点对初学者很重要，学习设计模式将有助于初学者更加深入地理解面向对象思想，让你知道：如何将代码分散在几个不同的类中？为什么要有“接口”？何谓针对抽象编程？何时不应该使用继承？如果不修改源代码增加新功能？同时还让你能够更好地阅读和理解现有类库（如JDK）与其他系统中的源代码，让你早点脱离面向对象编程的“菜鸟期”</li>
</ol>
<blockquote>
<p>个人观点：</p>
<ul>
<li>掌握设计模式并不是件很难的事情，关键在于多思考，多实践，不要听到人家说懂几个设计模式就很“牛”，只要用心学习，设计模式也就那么回事，你也可以很“牛”的，一定要有信心</li>
<li>在学习每一个设计模式时至少应该掌握如下几点：这个设计模式的意图是什么，它要解决一个什么问题，什么时候可以使用它；它是如何解决的，掌握它的结构图，记住它的关键代码；能够想到至少两个它的应用实例，一个生活中的，一个软件中的；这个模式的优缺点是什么，在使用时要注意什么。当你能够回答上述所有问题时，恭喜你，你了解一个设计模式了，至于掌握它，那就在开发中去使用吧，用多了你自然就掌握了</li>
<li>“如果想体验一下运用模式的感觉，那么最好的方法就是运用它们”。设计模式是“内功心法”，它还是要与“实战招式”相结合才能够相得益彰。学习设计模式的目的在于应用，如果不懂如何使用一个设计模式，而只是学过，能够说出它的用途，绘制它的结构，充其量也只能说你了解这个模式，严格一点说：不会在开发中灵活运用一个模式基本上等于没学。所以一定要做到：少说多做</li>
<li>千万不要滥用模式，不要试图在一个系统中用上所有的模式，也许有这样的系统，但至少目前我没有碰到过。每个模式都有自己的适用场景，不能为了使用模式而使用模式？滥用模式不如不用模式，因为滥用的结果得不到“艺术品”一样的软件，很有可能是一堆垃圾代码</li>
<li>如果将设计模式比喻成“三十六计”，那么每一个模式都是一种计策，它为解决某一类问题而诞生，不管这个设计模式的难度如何，使用频率高不高，我建议大家都应该好好学学，多学一个模式也就意味着你多了“一计”，说不定什么时候一不小心就用上了。因此，模式学习之路上要不怕困难，勇于挑战，有的模式虽然难一点，但反复琢磨，反复研读，应该还是能够征服的</li>
<li>设计模式的“上乘”境界：“手中无模式，心中有模式”。模式使用的最高境界是你已经不知道具体某个设计模式的定义和结构了，但你会灵活自如地选择一种设计方案【其实就是某个设计模式】来解决某个问题，设计模式已经成为你开发技能的一部分，能够手到擒来，“内功”与“招式”已浑然一体，要达到这个境界并不是看完某本书或者开发一两个项目就能够实现的，它需要不断沉淀与积累，所以，对模式的学习不要急于求成</li>
</ul>
</blockquote>
<h1 id="面向对象设计原则"><a href="#面向对象设计原则" class="headerlink" title="面向对象设计原则"></a>面向对象设计原则</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>对于面向对象软件系统的设计而言，在支持可维护性的同时，提高系统的可复用性是一个至关重要的问题，如何同时提高一个软件系统的可维护性和可复用性是面向对象设计需要解决的核心问题之一。在面向对象设计中，可维护性的复用是以设计原则为基础的。每一个原则都蕴含一些面向对象设计的思想，可以从不同的角度提升一个软件结构的设计水平。</p>
<p>面向对象设计原则为支持可维护性复用而诞生，这些原则蕴含在很多设计模式中，它们是从许多设计方案中总结出的指导性原则。面向对象设计原则也是我们用于评价一个设计模式的使用效果的重要指标之一，在设计模式的学习中，大家经常会看到诸如“XXX模式符合XXX原则”、“XXX模式违反了XXX原则”这样的语句</p>
<p><strong>常见的7种面向对象设计原则</strong></p>
<table>
<thead>
<tr>
<th>设计原则名称</th>
<th>定义</th>
<th>使用频率</th>
</tr>
</thead>
<tbody><tr>
<td>单一职责原则</td>
<td>一个类只负责一个功能领域中的相应职责</td>
<td>★★★★☆</td>
</tr>
<tr>
<td>开闭原则</td>
<td>软件实体应对扩展开放，而对修改关闭</td>
<td>★★★★★</td>
</tr>
<tr>
<td>里氏代换原则</td>
<td>所有引用基类对象的地方能够透明地使用其子类的对象</td>
<td>★★★★★</td>
</tr>
<tr>
<td>依赖倒转原则</td>
<td>抽象不应该依赖于细节，细节应该依赖于抽象</td>
<td>★★★★★</td>
</tr>
<tr>
<td>接口隔离原则</td>
<td>使用多个专门的接口，而不使用单一的总接口</td>
<td>★★☆☆☆</td>
</tr>
<tr>
<td>合成复用原则</td>
<td>尽量使用对象组合，而不是继承来达到复用的目的</td>
<td>★★★★☆</td>
</tr>
<tr>
<td>迪米特法则</td>
<td>一个软件实体应当尽可能少地与其他实体发生相互作用</td>
<td>★★★☆☆</td>
</tr>
</tbody></table>
<h2 id="1、单一职责原则"><a href="#1、单一职责原则" class="headerlink" title="1、单一职责原则"></a>1、单一职责原则</h2><p><img src="/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1.jpg" alt="1"></p>
<p>如图所示的一个类，类中的方法说明如下：<code>getConnection()</code>方法用于连接数据库，<code>findCustomers()</code>用于查询所有的客户信息，<code>createChart()</code>用于创建图表，<code>displayChart()</code>用于显示图表。</p>
<p><code>CustomerDataChart</code>类承担了太多的职责，既包含与数据库相关的方法，又包含与图表生成和显示相关的方法。如果在其他类中也需要连接数据库或者使用<code>findCustomers()</code>方法查询客户信息，则难以实现代码的重用。无论是修改数据库连接方式还是修改图表显示方式都需要修改该类，它不止一个引起它变化的原因，违背了单一职责原则。因此需要对该类进行拆分，使其满足单一职责原则，类<code>CustomerDataChart</code>可拆分为如下三个类：</p>
<ol>
<li><code>DBUtil</code>：负责连接数据库，包含数据库连接方法<code>getConnection()</code></li>
<li><code>CustomerDAO</code>：负责操作数据库中的Customer表，包含对<code>Customer</code>表的增删改查等方法，如<code>findCustomers()</code></li>
<li><code>CustomerDataChart</code>：负责图表的生成和显示，包含方法<code>createChart()</code>和<code>displayChart()</code></li>
</ol>
<p>使用单一职责原则，重构后的结构如下图所示：</p>
<p><img src="/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2.jpg" alt="2"></p>
<h2 id="2、开闭原则"><a href="#2、开闭原则" class="headerlink" title="2、开闭原则"></a>2、开闭原则</h2><p><img src="/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3.jpg" alt="3"></p>
<p>如图所示，在<code>ChartDisplay</code>类的<code>display()</code>方法中存在以下片段：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="keyword">if</span> (type.equals(<span class="string">&quot;pie&quot;</span>)) &#123;</span><br><span class="line">    <span class="type">PieChart</span> <span class="variable">pieChart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PieChart</span>();</span><br><span class="line">    pieChart.display();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">&quot;bar&quot;</span>)) &#123;</span><br><span class="line">    <span class="type">BarChart</span> <span class="variable">barChart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BarChart</span>();</span><br><span class="line">	barChart.display();</span><br><span class="line">&#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>在该代码中，如果需要增加一个新的图表类，如折线图<code>LineChart</code>，则需要修改<code>ChartDisplay</code>类的<code>display()</code>方法的源代码，增加新的判断逻辑，违反了开闭原则。</p>
<p>现对该系统进行重构，使之符合开闭原则。</p>
<p>在本实例中，由于在<code>ChartDisplay</code>类的<code>display()</code>方法中针对每一个图表类编程，因此增加新的图表类不得不修改源代码。可以通过抽象化的方式对系统进行重构，使之增加新的图表类时无须修改源代码，满足开闭原则。具体做法如下：</p>
<ol>
<li>增加一个抽象图表类<code>AbstractChart</code>，将各种具体图表类作为其子类</li>
<li><code>ChartDisplay</code>类针对抽象图表类进行编程，由客户端来决定使用哪种具体图表</li>
</ol>
<p>重构后的结构如下图所示：</p>
<p><img src="/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/4.jpg" alt="4"></p>
<p>我们引入了抽象图表类<code>AbstractChart</code>，且<code>ChartDisplay</code>针对抽象图表类进行编程，并通过<code>setChart()</code>方法由客户端来设置实例化的具体图表对象，在<code>ChartDisplay</code>的<code>display()</code>方法中调用<code>chart</code>对象的<code>display()</code>方法显示图表。如果需要增加一种新的图表，如折线图<code>LineChart</code>，只需要将<code>LineChart</code>也作为<code>AbstractChart</code>的子类，在客户端向<code>ChartDisplay</code>中注入一个<code>LineChart</code>对象即可，无须修改现有类库的源代码</p>
<h2 id="3、里氏代换原则"><a href="#3、里氏代换原则" class="headerlink" title="3、里氏代换原则"></a>3、里氏代换原则</h2><p>定义：<strong>所有引用基类（父类）的地方必须能透明地使用其子类的对象</strong></p>
<p>里氏代换原则告诉我们，<strong>在软件中将一个基类对象替换成它的子类对象，程序将不会产生任何错误和异常，反过来则不成立，如果一个软件实体使用的是一个子类对象的话，那么它不一定能够使用基类对象</strong>。里氏代换原则是实现开闭原则的重要方式之一，由于使用基类对象的地方都可以使用子类对象，因此<strong>在程序中尽量使用基类类型来对对象进行定义，而在运行时再确定其子类类型，用子类对象来替换父类对象</strong></p>
<p><img src="/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/5.jpg" alt="5"></p>
<p>如上图所示，客户(Customer)可以分为VIP客户(<code>VIPCustomer</code>)和普通客户(<code>CommonCustomer</code>)两类，系统需要提供一个发送Email的功能</p>
<p>在对系统进行进一步分析后发现，无论是普通客户还是VIP客户，发送邮件的过程都是相同的，也就是说两个<code>send()</code>方法中的代码重复，而且在本系统中还将增加新类型的客户。为了让系统具有更好的扩展性，同时减少代码重复，使用里氏代换原则对其进行重构</p>
<p><img src="/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/6.jpg" alt="6"></p>
<p>重构之后，新增加一个<code>Customer</code>类作为<code>CommonCustomer</code>和<code>VIPCustomer</code>的抽象类，邮件发送类<code>EmailSender</code>针对抽象客户类<code>Customer</code>编程，根据里氏代换原则，能够接受基类对象的地方必然能够接受子类对象，因此将<code>EmailSender</code>中的<code>send()</code>方法的参数类型改为<code>Customer</code>，如果需要增加新类型的客户，只需将其作为<code>Customer</code>类的子类即可</p>
<h2 id="4、依赖倒转原则"><a href="#4、依赖倒转原则" class="headerlink" title="4、依赖倒转原则"></a>4、依赖倒转原则</h2><p>定义：<em><strong>抽象不应该依赖于细节，细节应当依赖于抽象。换言之，要针对接口编程，而不是针对实现编程</strong></em></p>
<p><img src="/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.jpg" alt="7"></p>
<p>如上图所示，每次转换数据时数据来源不一定相同，因此需要更换数据转换类，如有时候需要将<code>TXTDataConvertor</code>改为<code>ExcelDataConvertor</code>，此时，需要修改<code>CustomerDAO</code>的源代码，而且在引入并使用新的数据转换类时也不得不修改<code>CustomerDAO</code>的源代码，系统扩展性较差，违反了开闭原则，现需要对该方案进行重构</p>
<p>重构后如下图：</p>
<p><img src="/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/8.jpg" alt="8"></p>
<p>由于<code>CustomerDAO</code>针对具体数据转换类编程，因此在增加新的数据转换类或者更换数据转换类时都不得不修改<code>CustomerDAO</code>的源代码。我们可以通过引入抽象数据转换类解决该问题，在引入抽象数据转换类<code>DataConvertor</code>之后，<code>CustomerDAO</code>针对抽象类<code>DataConvertor</code>编程，而将具体数据转换类名存储在配置文件中，符合依赖倒转原则。根据里氏代换原则，程序运行时，具体数据转换类对象将替换<code>ataConvertor</code>类型的对象，程序不会出现任何问题。更换具体数据转换类时无须修改源代码，只需要修改配置文件；如果需要增加新的具体数据转换类，只要将新增数据转换类作为<code>DataConvertor</code>的子类并修改配置文件即可，原有代码无须做任何修改，满足开闭原则</p>
<p><em><strong>重点</strong></em></p>
<blockquote>
<p>在上述重构过程中，我们使用了开闭原则、里氏代换原则和依赖倒转原则，在大多数情况下，这三个设计原则会同时出现，<strong>开闭原则是目标，里氏代换原则是基础，依赖倒转原则是手段</strong>，它们相辅相成，相互补充，目标一致，只是分析问题时所站角度不同而已</p>
</blockquote>
<h2 id="5、接口隔离原则"><a href="#5、接口隔离原则" class="headerlink" title="5、接口隔离原则"></a>5、接口隔离原则</h2><p>定义：<em><strong>使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口</strong></em></p>
<p><img src="/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/9.jpg" alt="9"></p>
<p>如上图所示，方法<code>dataRead()</code>用于从文件中读取数据，方法<code>transformToXML()</code>用于将数据转换成XML格式，方法<code>createChart()</code>用于创建图表，方法<code>displayChart()</code>用于显示图表，方法<code>createReport()</code>用于创建文字报表，方法<code>displayReport()</code>用于显示文字报表。</p>
<p>在实际使用过程中发现该接口很不灵活，例如如果一个具体的数据显示类无须进行数据转换（源文件本身就是XML格式），但由于实现了该接口，将不得不实现其中声明的<code>transformToXML()</code>方法（至少需要提供一个空实现）；如果需要创建和显示图表，除了需实现与图表相关的方法外，还需要实现创建和显示文字报表的方法，否则程序编译时将报错。现使用接口隔离原则对其进行重构</p>
<p>重构后如下图：</p>
<p><img src="/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/10.jpg" alt="10"></p>
<p><em><strong>在使用接口隔离原则时，我们需要注意控制接口的粒度，接口不能太小，如果太小会导致系统中接口泛滥，不利于维护；接口也不能太大，太大的接口将违背接口隔离原则，灵活性较差，使用起来很不方便</strong></em></p>
<h2 id="6、合成复用原则"><a href="#6、合成复用原则" class="headerlink" title="6、合成复用原则"></a>6、合成复用原则</h2>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>linux</title>
    <url>/posts/linux/</url>
    <content><![CDATA[<h1 id="vim编辑器"><a href="#vim编辑器" class="headerlink" title="vim编辑器"></a>vim编辑器</h1><h2 id="1、查找功能"><a href="#1、查找功能" class="headerlink" title="1、查找功能"></a>1、查找功能</h2><h3 id="（1）、匹配"><a href="#（1）、匹配" class="headerlink" title="（1）、匹配"></a>（1）、匹配</h3><ul>
<li><p>片段匹配</p>
<ol>
<li>从上往下找，比如“hello”：&#x2F;hello</li>
<li>从下往上找，比如”hello“：?hello</li>
</ol>
</li>
<li><p>精确匹配</p>
<p>如果你输入“&#x2F;the”，你也可能找到“three“。</p>
<ol>
<li>只匹配单词开头：&#x2F;\&lt;the</li>
<li>只匹配单词结尾：&#x2F;the\&gt;</li>
<li>完整匹配单词：&#x2F;\&lt;the\&gt;</li>
</ol>
</li>
</ul>
<h3 id="（2）、正则表达式"><a href="#（2）、正则表达式" class="headerlink" title="（2）、正则表达式"></a>（2）、正则表达式</h3><ol>
<li>”.“：通配一个字符，如匹配server，可以用&#x2F;se…r，一个”.“只匹配一个字符</li>
<li>”*“：统配多个字符，如匹配server，可以用s*r，一个”*“可以匹配多个字符</li>
</ol>
<h3 id="（3）、快速查找"><a href="#（3）、快速查找" class="headerlink" title="（3）、快速查找"></a>（3）、快速查找</h3>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
